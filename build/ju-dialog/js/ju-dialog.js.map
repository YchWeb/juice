{"version":3,"names":[],"mappings":"","sources":["ju-dialog.js"],"sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar juDialog = function () {\n    function juDialog(type) {\n        _classCallCheck(this, juDialog);\n\n        this.assign();\n        this.type = type;\n        this.selector = '.ju-dialog';\n        this.hodor = document.createElement('div');\n\n        // 是否在完成callback之后进行destory操作\n        this.callbackDestory = true;\n\n        this.config = {\n            title: 'Hello',\n            content: 'Are you sure to continue?',\n            contentLoaded: null,\n            icon: '',\n            opacity: 0.2,\n\n            confirmButton: 'Okay',\n            cancelButton: 'Close',\n\n            confirmButtonClass: 'ju-dialog-default',\n            cancelButtonClass: 'ju-dialog-default',\n\n            theme: 'white',\n            animation: 'zoom',\n            closeAnimation: 'scale',\n            animationSpeed: 500,\n            animationBounce: 1.2,\n            keyboardEnabled: false,\n            rtl: false,\n            confirmKeys: [13], // ENTER key\n            cancelKeys: [27], // ESC key\n\n            container: 'body',\n            backgroundClose: false,\n            autoClose: false,\n\n            // callback\n            onConfirm: null,\n            onCancel: null,\n            onOpen: null,\n            onClose: null,\n            onAction: null,\n\n            closeIcon: null,\n            closeIconClass: false,\n            watchInterval: 100\n        };\n\n        this.args = arguments.length <= 1 ? undefined : arguments[1];\n\n        Object.assign(this.config, this.args);\n\n        this.init();\n    }\n\n    _createClass(juDialog, [{\n        key: 'init',\n        value: function init() {\n            this.close = '<div class=\"ju-dialog-close\">x</div>';\n\n            this.title = '<div class=\"ju-dialog-title\">' + this.config.title + '</div>';\n\n            this.content = '<div class=\"ju-dialog-content\">' + this.config.content + '</div>';\n\n            this.buttons = '';\n\n            this.confirmButton = '<button type=\"button\" class=\"ju-dialog-btn ju-dialog-confirm\">\\n            ' + this.config.confirmButton + '\\n        </button>';\n\n            this.cancelButton = '<button type=\"button\" class=\"ju-dialog-btn ju-dialog-cancel\">\\n            ' + this.config.cancelButton + '\\n        </button>';\n\n            switch (this.type) {\n                case 'dialog':\n                    this.dialog();\n                    break;\n                case 'alert':\n                    this.alert();\n                    break;\n                case 'confirm':\n                    this.confirm();\n                    break;\n                default:\n                    throw new Error('type must is dialog, alert or confirm');\n            }\n        }\n    }, {\n        key: 'bindEvent',\n        value: function bindEvent() {\n            var _this = this;\n\n            var $confirm = this.box.querySelector('.ju-dialog-confirm');\n            var $cancel = this.box.querySelector('.ju-dialog-cancel');\n            var $close = this.box.querySelector('.ju-dialog-close');\n            var $bg = this.elemet.querySelector('.ju-dialog-bg');\n\n            if ($confirm) {\n                $confirm.addEventListener('click', function () {\n                    if (_this.config.onConfirm) {\n                        _this.config.onConfirm.call(_this);\n                    } else {\n                        _this.destory();\n                    }\n                    return false;\n                });\n            }\n\n            if ($cancel) {\n                $cancel.addEventListener('click', function () {\n                    if (_this.config.onCancel) {\n                        _this.config.onCancel.call(_this);\n                    } else {\n                        _this.destory();\n                    }\n                    return false;\n                });\n            }\n\n            if ($close) {\n                $close.addEventListener('click', function () {\n                    if (_this.config.onClose) {\n                        _this.config.onClose.call(_this);\n                    } else {\n                        _this.destory();\n                    }\n                    return false;\n                });\n            }\n\n            if (this.config.backgroundClose) {\n                if ($bg) {\n                    $bg.addEventListener('click', function () {\n                        _this.destory();\n                        return false;\n                    });\n                } else {\n                    throw new Error('open backgroundClose fail.');\n                }\n            } else {\n                if ($bg) {\n                    $bg.addEventListener('click', function () {\n                        if (_this.box.className.indexOf('shark') > -1) {\n                            return false;\n                        }\n\n                        _this.box.className += ' shark';\n\n                        setTimeout(function () {\n                            _this.box.className = _this.box.className.replace(' shark', '');\n                        }, 800);\n\n                        return false;\n                    });\n                } else {\n                    throw new Error('open backgroundClose fail.');\n                }\n            }\n        }\n    }, {\n        key: 'renderButtons',\n        value: function renderButtons() {\n            if (this.config.confirmButton) {\n                this.buttons += this.confirmButton;\n            }\n\n            if (this.config.cancelButton) {\n                this.buttons += this.cancelButton;\n            }\n\n            this.buttonsWarp = '<div class=\"ju-dialog-buttons\">' + this.buttons + '</div>';\n        }\n    }, {\n        key: 'renderBox',\n        value: function renderBox() {\n            this.body = '\\n            <div class=\"ju-dialog-bg\" style=\"opacity: ' + this.config.opacity + '\"></div>\\n            <div class=\"ju-dialog-warp\">\\n                <div class=\"ju-dialog-container\">\\n                    <div class=\"ju-dialog-box\">\\n                        ' + this.close + '\\n                        ' + this.title + '\\n                        ' + this.content + '\\n                        ' + this.buttonsWarp + '\\n                        <div class=\"ju-dialog-clear\"></div>\\n                    </div>\\n                </div>\\n            </div>\\n        ';\n        }\n    }, {\n        key: 'renderWarp',\n        value: function renderWarp() {\n            this.addClass(this.hodor, 'ju-dialog');\n            this.addClass(this.hodor, this.config.theme);\n            this.hodor.innerHTML = this.body;\n        }\n    }, {\n        key: 'renderElements',\n        value: function renderElements() {\n            this.renderButtons();\n            this.renderBox();\n            this.renderWarp();\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            if (document.querySelector(this.selector)) {\n                this.destory();\n            }\n            this.renderElements();\n            this.append();\n            this.setElements();\n            this.setAnimation();\n            this.setCenter();\n            this.bindEvent();\n        }\n    }, {\n        key: 'setElements',\n        value: function setElements() {\n            this.elemet = document.querySelector(this.selector);\n            this.box = this.elemet.querySelector('.ju-dialog-box');\n        }\n    }, {\n        key: 'setCenter',\n        value: function setCenter() {\n            var dialogHeight = document.querySelector('.ju-dialog-container').offsetHeight;\n            var bodyHeight = window.screen.height / 2;\n            var height = bodyHeight - dialogHeight;\n            this.box.style.marginTop = height + 'px';\n        }\n    }, {\n        key: 'setAnimation',\n        value: function setAnimation() {\n            var _this2 = this;\n\n            if (this.config.animation) {\n                this.addClass(this.box, this.config.animation);\n                setTimeout(function () {\n                    _this2.removeClass(_this2.box, _this2.config.animation);\n                }, 200);\n            }\n        }\n    }, {\n        key: 'append',\n        value: function append() {\n            document.querySelector(this.config.container).appendChild(this.hodor);\n        }\n    }, {\n        key: 'remove',\n        value: function remove() {\n            document.body.removeChild(document.querySelector(this.selector));\n        }\n    }, {\n        key: 'destory',\n        value: function destory() {\n            var _this3 = this;\n\n            if (this.callbackDestory) {\n                if (this.box) {\n                    this.box.className += ' scale';\n                    setTimeout(function () {\n                        _this3.remove();\n                    }, 200);\n                } else {\n                    this.remove();\n                }\n            }\n        }\n    }, {\n        key: 'dialog',\n        value: function dialog() {\n            this.config.confirmButton = false;\n            this.config.cancelButton = false;\n            this.render();\n        }\n    }, {\n        key: 'alert',\n        value: function alert() {\n            this.config.cancelButton = false;\n            this.render();\n        }\n    }, {\n        key: 'confirm',\n        value: function confirm() {\n            this.render();\n        }\n    }, {\n        key: 'assign',\n        value: function assign() {\n            // 兼容处理\n            /*eslint-disable */\n            if (!Object.assign) {\n                Object.defineProperty(Object, \"assign\", {\n                    enumerable: false,\n                    configurable: true,\n                    writable: true,\n                    value: function value(target, firstSource) {\n                        \"use strict\";\n\n                        if (target === undefined || target === null) throw new TypeError(\"Cannot convert first argument to object\");\n                        var to = Object(target);\n                        for (var i = 1; i < arguments.length; i++) {\n                            var nextSource = arguments[i];\n                            if (nextSource === undefined || nextSource === null) continue;\n                            var keysArray = Object.keys(Object(nextSource));\n                            for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n                                var nextKey = keysArray[nextIndex];\n                                var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n                                if (desc !== undefined && desc.enumerable) to[nextKey] = nextSource[nextKey];\n                            }\n                        }\n                        return to;\n                    }\n                });\n            }\n            /*eslint-enable */\n        }\n    }, {\n        key: 'hasClass',\n        value: function hasClass(elemet, cls) {\n            var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n            if (elemet.className.match(reg)) {\n                return true;\n            }\n            return false;\n        }\n    }, {\n        key: 'addClass',\n        value: function addClass(elemet, cls) {\n            var el = elemet;\n\n            if (el.className) {\n                el.className = el.className + ' ' + cls;\n            } else {\n                el.className = cls;\n            }\n\n            return false;\n        }\n    }, {\n        key: 'removeClass',\n        value: function removeClass(elemet, cls) {\n            var el = elemet;\n            el.className = el.className.replace(' ' + cls, '');\n            return false;\n        }\n    }]);\n\n    return juDialog;\n}();"],"file":"ju-dialog.js","sourceRoot":"/source/"}