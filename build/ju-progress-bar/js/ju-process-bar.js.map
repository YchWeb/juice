{"version":3,"names":[],"mappings":"","sources":["ju-process-bar.js"],"sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar JuProcessBar = function () {\n    function JuProcessBar() {\n        _classCallCheck(this, JuProcessBar);\n\n        this.className = 'ju-process-bar';\n\n        this.hodor = document.createElement('div');\n        this.hodor.className = this.className;\n    }\n\n    _createClass(JuProcessBar, [{\n        key: 'show',\n        value: function show() {\n            document.body.appendChild(this.hodor);\n        }\n    }, {\n        key: 'hide',\n        value: function hide() {\n            if (this.hasAdded()) {\n                document.body.removeChild(this.hodor);\n            }\n        }\n    }, {\n        key: 'hasAdded',\n        value: function hasAdded() {\n            if (document.getElementsByClassName(this.className).length > 0) {\n                return true;\n            }\n            return false;\n        }\n    }]);\n\n    return JuProcessBar;\n}();"],"file":"ju-process-bar.js","sourceRoot":"/source/"}